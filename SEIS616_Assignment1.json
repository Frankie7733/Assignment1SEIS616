{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
      "InstanceType": {
        "Description": "EC2 instance type",
        "Type": "String",
        "Default": "t2.micro",
        "AllowedValues": [
          "t2.micro",
          "t2.small"
        ],
        "ConstraintDescription": "Must be a valid EC2 type."
      },
      "KeyPairName": {
        "Description": "Name of your EC2 keypair to enable SSH access",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription": "Must be the name of an existing KeyPair"
      },
      "YourIP": {
        "Description": "The current IP address of your workstation (x.x.x.x/32)",
        "Type": "String"
      }
    },
    "Resources": {
      "EngineeringVpc": {
        "Type": "AWS::EC2::VPC",
        "Properties": {
          "EnableDnsSupport": true,
          "EnableDnsHostnames": true,
          "CidrBlock": "10.0.0.0/18",
          "Tags": [
            {
              "Key": "Name",
              "Value": "EngineeringVpc"
            }
          ]
        }
      },
      "InternetGateway": {
        "Type": "AWS::EC2::InternetGateway",
        "Properties": {
          "Tags": [
            {
              "Key": "Name",
              "Value": "IGEngineer"
            }
          ]
        }
      },
      "VPCGatewayAttachment": {
        "Type": "AWS::EC2::VPCGatewayAttachment",
        "Properties": {
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          },
          "VpcId": {
            "Ref": "EngineeringVpc"
          }
        }
      },
      "PublicRouteTable": {
        "Type": "AWS::EC2::RouteTable",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          }
        }
      },
      "PublicRoute": {
        "Type": "AWS::EC2::Route",
        "Properties": {
          "DestinationCidrBlock": "0.0.0.0/0",
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "GatewayId": {
            "Ref": "InternetGateway"
          }
        },
        "DependsOn": [
          "VPCGatewayAttachment"
        ]
      },
      "PublicSubnet1": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          },
          "MapPublicIpOnLaunch": true,
          "CidrBlock": "10.0.1.0/24",
          "AvailabilityZone": {
            "Fn::Select": [
              "0",
              {
                "Fn::GetAZs": {
                  "Ref": "AWS::Region"
                }
              }
            ]
          },
          "Tags": [
            {
              "Key": "Name",
              "Value": "PublicSubnet1"
            }
          ]
        }
      },
      "PublicSubnet1RTassoc": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          },
          "SubnetId": {
            "Ref": "PublicSubnet1"
          }
        }
      },
      "PublicSubnet2": {
        "Type": "AWS::EC2::Subnet",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          },
          "CidrBlock": "10.0.2.0/24",
          "MapPublicIpOnLaunch": true,
          "Tags": [
            {
              "Key": "Name",
              "Value": "PublicSubnet2"
            }
          ]
        }
      },
      "PublicSubnet2RTassoc": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
          "SubnetId": {
            "Ref": "PublicSubnet2"
          },
          "RouteTableId": {
            "Ref": "PublicRouteTable"
          }
        }
      },
      "Web1": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "KeyName": {
            "Ref": "KeyPairName"
          },
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": {
            "Ref": "PublicSubnet1"
          },
          "SecurityGroupIds": [
            {
              "Ref": "WebserverSG"
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "Web1"
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Sub": "#!/bin/bash\nyum update -y\nyum install -y git httpd php\nservice httpd start\nchkconfig httpd on\naws s3 cp s3://seis665-public/index.php /var/www/html/"
            }
          }
        }
      },
      "Web2": {
        "Type": "AWS::EC2::Instance",
        "Properties": {
          "InstanceType": {
            "Ref": "InstanceType"
          },
          "KeyName": {
            "Ref": "KeyPairName"
          },
          "ImageId": "ami-01cc34ab2709337aa",
          "SubnetId": {
            "Ref": "PublicSubnet2"
          },
          "SecurityGroupIds": [
            {
              "Ref": "WebserverSG"
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "Web2"
            }
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Sub": "#!/bin/bash\nyum update -y\nyum install -y git httpd php\nservice httpd start\nchkconfig httpd on\naws s3 cp s3://seis665-public/index.php /var/www/html/"
            }
          }
        }
      },
      "EngineeringLB": {
        "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties": {
          "Subnets": [
            {
              "Ref": "PublicSubnet1"
            },
            {
              "Ref": "PublicSubnet2"
            }
          ],
          "SecurityGroups": [
            {
              "Ref": "WebserverSG"
            }
          ],
          "Scheme": "internet-facing",
          "LoadBalancerAttributes": [
            {
              "Key": "deletion_protection.enabled",
              "Value": "false"
            },
            {
              "Key": "idle_timeout.timeout_seconds",
              "Value": "60"
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "EngineeringLB"
            }
          ]
        }
      },
      "EngineeringWebservers": {
        "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          },
          "Port": 80,
          "Protocol": "HTTP",
          "TargetType": "instance",
          "HealthCheckProtocol": "HTTP",
          "HealthCheckPort": "80",
          "HealthCheckPath": "/",
          "Matcher": {
            "HttpCode": "200"
          },
          "Targets": [
            {
              "Id": {
                "Ref": "Web1"
              }
            },
            {
              "Id": {
                "Ref": "Web2"
              }
            }
          ],
          "Tags": [
            {
              "Key": "Name",
              "Value": "EngineeringWebservers"
            }
          ]
        }
      },
      "Listener": {
        "Type": "AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
          "LoadBalancerArn": {
            "Ref": "EngineeringLB"
          },
          "Port": 80,
          "Protocol": "HTTP",
          "DefaultActions": [
            {
              "Type": "forward",
              "TargetGroupArn": {
                "Ref": "EngineeringWebservers"
              }
            }
          ]
        }
      },
      "WebserverSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
          "VpcId": {
            "Ref": "EngineeringVpc"
          },
          "GroupDescription": "Security group rules for webserver host.",
          "SecurityGroupIngress": [
            {
              "IpProtocol": "tcp",
              "FromPort": 80,
              "ToPort": 80,
              "CidrIp": "0.0.0.0/0"
            },
            {
              "IpProtocol": "tcp",
              "FromPort": 22,
              "ToPort": 22,
              "CidrIp": {
                "Ref": "YourIP"
              }
            }
          ]
        }
      }
    },
    "Outputs": {
      "weburl": {
        "Value": {
          "Fn::Join": [
            "",
            [
              "http://",
              {
                "Fn::GetAtt": [
                  "Web1",
                  "PublicIp"
                ]
              }
            ]
          ]
        },
        "Description": "Webserver URL"
      }
    }
  }